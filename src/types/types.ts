import type { FilterStatus, CodeEvent } from "@/basic";
/**
 * Интерфейс для объекта со свойствами, которые определяют содержание и внешний вид предупреждения.
 */
export interface Data {
  /**
   * eventType - Код типа предупреждения (важность). Будет предопределено
   * несколько типов предупреждений. Определяет цветовую схему и параметры
   * используемых шрифтов. Цветовые схемы будут подключаться в корневой
   * компоненте из отдельного файла.
   */
  eventType: CodeEvent;
  /**
   * eventTime - Время действия предупреждения. Может быть точным (одно
   * значение) или интервальным (два значения). Значение времени передается в
   * формате timestamp.
   */
  eventTime: number | number[];
  /**
   * timeFormat -  Формат отображения времени. Возможные варианты:
   * часы:минуты; часы:минуты день:месяц; другие.
   */
  timeFormat: string;
  /**
   * titleText -  Текст заголовка.
   */
  titleText: string;
  /**
   * eventText - Текст предупреждения.
   */
  eventText: string;
  /**
   * iconCode - Опциональный параметр. Код иконки предупреждения. Компонента
   * такой иконки будет создана позднее. Компонента будет представлять собой
   * графическое изображение в формате svg (на которое также будет
   * распространяться цветовая схема заданная типом предупреждения). Поэтому
   * предполагается передача в нее через Property кода, для отображения.
   */
  iconCode?: number;
  /**
   * isDayShow - Опциональный параметр. Отвечает за отображение блока с датой.
   * Если true, то блок отрисовывается.
   */
  isDayShow?: boolean;
}

/**
 * Интерфейс фильтра.
 */
export interface Filter {
  /**
   * name - Наименование фильтра.
   */
  name: string;
  /**
   * amount - Общее количество предупреждений с одинаковым кодом.
   */
  amount: number;
  /**
   * status - Отвечает за состояние кнопки фильтра. Возможно 3 состояния:
   * disabled - кнопка заблокирована и неактивна
   * applied - фильтр применен
   * removed - фильтр не применен
   */
  status: FilterStatus;
}

/**
 * Интерфейс для объекта, который управляет отображением блока с фильтрами
 * и их состояниями.
 */
export interface Filters {
  [index: number]: Filter;
}

/**
 * Вспомогательный интерфейс.
 */
export type Datakeys = keyof Data;
